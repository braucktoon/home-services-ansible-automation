---
# update the system
- name: Run the equivalent of "apt-get update" as a separate step
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 3600

- name: Run the equivalent of "apt-get full-upgrade" as a separate step
  ansible.builtin.apt:
    upgrade: full

- name: Run the equivalent of "apt-get clean" as a separate step
  ansible.builtin.apt:
    clean: true

- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: register_name

- name: Unconditionally reboot the machine with all defaults
  ansible.builtin.reboot:
  when: register_name.stat.exists

# Install unattended-upgrades
- name: Install unattended upgrades package.
  ansible.builtin.apt:
    name: unattended-upgrades
    state: present

- name: Ensure that unattended-upgrades service is started and enabled on boot
  service:
    name: unattended-upgrades
    state: started
    enabled: true

- name: Copy unattended-upgrades configuration files in place.
  template:
    src: "{{ item }}.j2"
    dest: "/etc/apt/apt.conf.d/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - 20auto-upgrades
    - 50unattended-upgrades
  notify: restart unattended-upgrades

# install fail2ban
- name: Install fail2ban.
  ansible.builtin.apt:
    name: fail2ban
    state: present

- name: Copy fail2ban custom configuration file into place.
  template:
    src: "jail.local.j2"
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: 0644
  notify: restart fail2ban

- name: Ensure fail2ban is running and enabled on boot.
  service:
    name: fail2ban
    state: started
    enabled: true

#Harden SSH
- name: Ensure SSH daemon is running.
  service:
    name: "{{ security_sshd_name }}"
    state: "{{ security_sshd_state }}"

- name: Update SSH configuration to be more secure.
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
    validate: 'sshd -T -f %s'
    mode: 0644
  with_items:
    - regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication {{ security_ssh_password_authentication }}"
    - regexp: "^PermitRootLogin"
      line: "PermitRootLogin {{ security_ssh_permit_root_login }}"
    - regexp: "^Port"
      line: "Port {{ security_ssh_port }}"
    - regexp: "^UseDNS"
      line: "UseDNS {{ security_ssh_usedns }}"
    - regexp: "^PermitEmptyPasswords"
      line: "PermitEmptyPasswords {{ security_ssh_permit_empty_password }}"
    - regexp: "^ChallengeResponseAuthentication"
      line: "ChallengeResponseAuthentication {{ security_ssh_challenge_response_auth }}"
    - regexp: "^GSSAPIAuthentication"
      line: "GSSAPIAuthentication {{ security_ssh_gss_api_authentication }}"
    - regexp: "^X11Forwarding"
      line: "X11Forwarding {{ security_ssh_x11_forwarding }}"
  notify: restart ssh

- name: Add configured users allowed to connect over ssh
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: '^AllowUsers'
    line: "AllowUsers {{ security_ssh_allowed_users | join(' ') }}"
    state: present
    create: true
    validate: 'sshd -T -f %s'
    mode: 0644
  when: security_ssh_allowed_users | length > 0
  notify: restart ssh

- name: Add configured groups allowed to connect over ssh
  lineinfile:
    dest: "{{ security_ssh_config_path }}"
    regexp: '^AllowGroups'
    line: "AllowGroups {{ security_ssh_allowed_groups | join(' ') }}"
    state: present
    create: true
    validate: 'sshd -T -f %s'
    mode: 0644
  when: security_ssh_allowed_groups | length > 0
  notify: restart ssh

#Configure sudoers
- name: Add configured user accounts to passwordless sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) NOPASSWD: ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: 0440
  with_items: "{{ security_sudoers_passwordless }}"
  when: security_sudoers_passwordless | length > 0

- name: Add configured user accounts to passworded sudoers.
  lineinfile:
    dest: /etc/sudoers
    regexp: '^{{ item }}'
    line: '{{ item }} ALL=(ALL) ALL'
    state: present
    validate: 'visudo -cf %s'
    mode: 0440
  with_items: "{{ security_sudoers_passworded }}"
  when: security_sudoers_passworded | length > 0

- name: generate SSH key "{{ssh_key_filename}}".
  connection: local
  openssh_keypair:
    path: "~/.ssh/{{ssh_key_filename}}"
    type: ed25519
    state: present
    force: false
    comment: "pi@backups"
  become: false

- name: Copy the private key to the service hosts.
  local_action: "ansible.builtin.command rsync -a ~/.ssh/{{ssh_key_filename}} {{username}}@{{inventory_hostname}}:~/.ssh/{{ssh_key_filename}}"
  become: false

- name: Copy the public key to backup host.
  local_action: "ansible.builtin.command ssh-copy-id -i ~/.ssh/{{ssh_key_filename}}.pub {{nas_user}}@{{nas_host}}"
  become: false

- name: Copy ssh config file into place.
  template:
    src: "config.j2"
    dest: "~/.ssh/config"
    mode: 0644
  become: false

- name: Make base backup directory
  ansible.builtin.file:
    path: "{{ backups_dir }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: 0755
